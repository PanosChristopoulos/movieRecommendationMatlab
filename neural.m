performanceOverall = 0;


% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 18-Apr-2020 21:05:27
%
% This script assumes these variables are defined:
%
%   usersf - input data.


%   RNormalized - target data.
for index=1:5

x = usersf';
t = RNormalized';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'traingdx';  % Scaled conjugate gradient backpropagation.
% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

 net.divideFcn = 'divideind';  
 net.divideMode = 'sample';  
net.performParam.regularization = 0.9
% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
 if index == 1

    net.divideParam.trainInd = [1:540,721:943];
    net.divideParam.valInd = 541:630;
    net.divideParam.testInd = 631:720;
%  
 elseif index == 2
 net.divideParam.trainInd = [1:720];
 net.divideParam.testInd = [721:810] ;
 net.divideParam.valInd = [811:943];
 
 elseif index == 3
 net.divideParam.trainInd = [1:360,541:943];
 net.divideParam.testInd = [361:450];
 net.divideParam.valInd = [451:540];

 elseif index == 4
 net.divideParam.trainInd = 181:943;
 net.divideParam.testInd = [1:90] ;
 net.divideParam.valInd = [91:180];
 
 elseif index == 5
 net.divideParam.trainInd = [1:180,361:943];
 net.divideParam.testInd = [181:270] ;
 net.divideParam.valInd = [271:360];
 end

 
net.trainParam.lr = 0.001;
net.trainParam.lr_inc = 1;
net.trainParam.lr_dec= 1;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mae';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
%net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
%    'plotregression', 'plotfit'};
% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end

performanceOverall = performanceOverall+performance;
end


meanPerformance = performanceOverall/5;